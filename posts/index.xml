<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - My New Hugo Site</title>
        <link>https://jinxiwei1230.github.io/Jinxiwei.github.io/posts/</link>
        <description>All Posts | My New Hugo Site</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 30 Sep 2024 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://jinxiwei1230.github.io/Jinxiwei.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Linux开发环境及应用(第4章)</title>
    <link>https://jinxiwei1230.github.io/Jinxiwei.github.io/posts/linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%BA%94%E7%94%A8%E7%AC%AC4%E7%AB%A0/</link>
    <pubDate>Mon, 30 Sep 2024 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jinxiwei1230.github.io/Jinxiwei.github.io/posts/linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%BA%94%E7%94%A8%E7%AC%AC4%E7%AB%A0/</guid>
    <description><![CDATA[<h2 id="第四章-正则表达式">第四章 正则表达式</h2>
<h3 id="元字符和集合">元字符和集合</h3>
<p>1、<strong>正则表达式的概念</strong>
应用范围：字符串匹配操作和替换操作</p>
<p>正则表达式的功能：描述一个字符串模式</p>
<p><strong>注意:</strong>
正则表达式规则与文件名通配符规则不同
正则表达式规则用于文本处理的场合
文件名匹配规则用于文件处理的场合</p>
<p>不同软件对正则表达式的定义会有差异</p>
<p>2、<strong>正则表达式中的特殊字符</strong>
6个元字符 :<strong><code>. * [ \ ^ $</code></strong></p>
<p>转义:用反斜线可以取消特殊字符的特殊含义
如：正则表达end.只与字符串end.匹配</p>
<p>3、<strong>单字符正则表达式</strong>
转义字符后除以上六种之外的不该出现其他字符，例如:不该出现\u，这样的组合被视为undefined（未定义的），后出的软件有可能会有特殊的解释</p>
<p><em>圆点（<code>·</code>）：匹配任意单字符</em></p>
<p>4、<strong>单字符正则表达式:定义集合</strong>
<strong>在[]之间的字符为集合的内容</strong>
如：单字符正则表达式<code>[abcd]</code>与a或b,c,d匹配</p>
<p><strong>圆点,星号，反斜线在方括号内时，代表它们自己</strong>
如:<code>[\*.]</code>可匹配3个单字符</p>
<p><strong>用减号-定义一个区间</strong></p>
<ul>
<li><code>[a-d]</code>、 <code>[A-Z]</code>、 <code>[a-zA-Z0-9]</code></li>
<li><code>[][]</code> 集合含左右中括号两个字符</li>
<li>减号在最后，则失去表示区间的意义，<code>[ad-]</code>只与3个字符匹配</li>
</ul>
<p><strong>用^表示补集</strong>
^在开头,则表示与集合内字符之外的任意字符匹配.
<code>[^a-z]</code>匹配任一非小写字母.
-<code>[^][]</code>匹配任一非中括号字符.</p>
<p>^不在开头,则失去其表示补集的意义
<code>[a-z^]</code>能匹配27个单字符</p>
<h3 id="组合与锚点">组合与锚点</h3>
<p><strong>1、单字符正则表达式的组合</strong>
<strong>串结</strong>
如abc， <code>[A-Z].[0-9]</code></p>
<p><strong>星号（*）</strong>：单字符正则表达式后跟*，匹配此单字符正则表达式的0次或任意多次出现</p>
<ul>
<li>正则表达式<code>12*4 </code>
与字符串1234不匹配，与1224，12224，14匹配</li>
<li>正则表达式<code>[A-Z][0-9]* </code>与<code>A</code>,<code>A1</code>,<code>C45</code>,<code>D768</code>匹配，与<code>b64512</code>,<code>T56t</code>不匹配</li>
<li><code>[Cc]hapter *[1-4] </code>在*号前有一个空格，允许数字1-4之前有多个或者0个空格,可匹配Chapter2, chapter 3等等</li>
</ul>
<p><strong>2、锚点:$和^</strong>
<strong><code>$</code> 在尾部时有特殊意义，否则与其自身匹配</strong></p>
<ul>
<li><code>123$</code> 匹配文件中行尾的123，不在行尾的123字符不匹配</li>
<li><code>$123</code>与字符串<code>$123</code>匹配</li>
<li><code>.$</code>匹配行尾的任意字符</li>
</ul>
<p><strong><code>^</code> 在首部时有特殊意义，否则与其自身匹配</strong></p>
<ul>
<li><code>^printf</code>匹配行首的printf字符串，不在行首的printf串不匹配</li>
<li><code>Hel^lo</code>与字符串<code>Hel^lo</code>匹配</li>
<li>在vi中使用:<code>10,50s/^ //g</code>,删除10-50行的每行行首的4个空格,<code>s/匹配内容/替换内容/</code>、<code>g</code>： global（全局替换）</li>
</ul>
<p><strong>3、正则表达式扩展</strong>
<strong>基本正则表达式（BRE）</strong></p>]]></description>
</item>
<item>
    <title>Linux开发环境及应用（1~3章）</title>
    <link>https://jinxiwei1230.github.io/Jinxiwei.github.io/posts/linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%BA%94%E7%94%A81~3%E7%AB%A0/</link>
    <pubDate>Sun, 29 Sep 2024 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jinxiwei1230.github.io/Jinxiwei.github.io/posts/linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%BA%94%E7%94%A81~3%E7%AB%A0/</guid>
    <description><![CDATA[<h2 id="第一章-linux入门">第一章 Linux入门</h2>
<h3 id="linux的历史">Linux的历史</h3>
<p>1、 <strong>操作系统的演变</strong></p>
<ul>
<li>手工操作</li>
<li>单道批处理操作系统</li>
<li>多道批处理系统</li>
<li>分时系统</li>
</ul>
<p>2、 <strong>Unix发展史</strong></p>
<ul>
<li>UNiplexed Information and Computing System</li>
<li>Unix早期的两大流派：贝尔实验室、加州大学伯克利分校</li>
</ul>
<h3 id="linux字符终端">Linux字符终端</h3>
<p>1、 <strong>Unix/Linux是多用户系统：</strong></p>
<ul>
<li>主机连接多台字符终端</li>
<li>字符终端作为交互式输入输出设备</li>
</ul>
<p>2、 <strong>终端和主机</strong></p>
<ul>
<li>
<p>终端: 主机的输入和输出设备
终端通过电缆把用户的按键信息送到主机，把主机发来的信息在屏幕上显示</p>
</li>
<li>
<p>主机: 程序和数据的存储及处理
数据及程序存放在主机的硬盘上，程序的运行也都由主机内的CPU占用主机内存来完成</p>
</li>
</ul>
<p>3、 <strong>行律与驱动程序</strong></p>
<ul>
<li>
<p>驱动程序：
不同的硬件需要不同的驱动程序
与行律模块的接口：上行和下行字符流</p>
</li>
<li>
<p>行律的作用
一行内字符的缓冲、回显与编辑，直到按下回车键
数据加工，如：将\n转化为\r\n
将Ctrl-C字符转化为中止进程运行的信号(signal)</p>
</li>
</ul>
<p>4、 <strong>主机与终端间的通信过程</strong></p>
<p>5、 <strong>终端转义序列</strong></p>
<ul>
<li>
<p>转义字符
Esc：ASCII码1B（十进制27，八进制033）</p>
</li>
<li>
<p>主机发往终端方向数据中的转义序列的功能
控制光标位置、字符颜色、字符大小等等
选择终端的字符集
控制终端上的打印机、刷卡机、磁条器、密码键盘</p>
</li>
</ul>
<p><em>Esc[2J 由主机发送到终端的四字节序列：1B 5B 32 4A 功能：清除屏幕
Esc[8A 四字节序列，光标上移8行
Esc[16;8H 七字节序列，光标移到16行8列
Esc[1;31m 七字节序列，红色字符</em></p>
<p>6、 <strong>终端类型</strong></p>
<ul>
<li>
<p>定义:定义一组转移序列以及相对应的操作</p>
</li>
<li>
<p>主机和终端之间的类型匹配
主机根据终端类型，实现相应功能时发送对应的控制码
当终端类型不对时，可能全屏幕操作失败</p>
</li>
</ul>
<p>7、 <strong>主机和终端之间的流量控制</strong></p>
<ul>
<li>
<p>必要性
终端的显示速度跟不上主机的发送速度
主机送来数据终端需要打印出来，但打印速度慢
主机送来的显示内容，需暂停显示，仔细分析
需要一种机制控制主机方向来的数据流量</p>]]></description>
</item>
<item>
    <title>Linux补充知识</title>
    <link>https://jinxiwei1230.github.io/Jinxiwei.github.io/posts/linux%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/</link>
    <pubDate>Sun, 29 Sep 2024 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jinxiwei1230.github.io/Jinxiwei.github.io/posts/linux%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/</guid>
    <description><![CDATA[<p>1、<code>echo -e &quot;\033[1;33mHello&quot;</code>
解析：输出黄色的Hello
<strong>在终端中使用 ANSI 转义序列 <code>\033[1;XXm</code> 来设置文本颜色时，<code>XX</code> 表示颜色代码</strong></p>
<ul>
<li><code>echo</code> 是一个用于在终端打印输出字符串的命令。它可以输出文本、变量或包含转义字符的字符串</li>
<li><code>-e</code> 是 echo 的一个选项参数，用于启用转义字符的处理。如果不加 -e 选项，像 <code>\033</code> 这样的转义序列会被当成普通字符串，而不会被解析为实际的控制字符</li>
<li><code>\033</code> 是一个转义字符，ESC 键的十进制值。用于引入 ANSI 转义序列，以改变文本的颜色、样式或光标位置</li>
<li><code>[1;33m</code>:这是一个 ANSI 转义序列，用来设置文本的格式和颜色。它的格式通常是 <code>\033[属性;颜色码m</code>，具体说明如下：
<ul>
<li><code>[1</code>：前面的 1 表示加粗。它属于文本属性控制码。常见的属性码有：<code>0</code>：重置所有属性、<code>1</code>：加粗、<code>4</code>：下划线、<code>7</code>：反显（文字和背景颜色交换）</li>
<li><code>;33</code>：表示前景色代码。在 ANSI 转义序列中，颜色代码分为前景色（字体颜色）和背景色。常用的颜色代码：<code>30：黑色、31：红色、32：绿色、33：黄色、34：蓝色、35：紫色、36：青色、37：白色</code></li>
<li><code>m</code>：表示 设置文本属性结束标志。该标志告诉终端接下来的内容需要应用前面指定的格式</li>
</ul>
</li>
</ul>
<p>恢复终端的默认颜色：<code>echo -e &quot;\033[0m&quot;</code></p>
<p>2、<strong>Linux 服务器适合开启数据压缩的理由：</strong>
<strong>带宽限制</strong>：1M 带宽相对较低，开启数据压缩可以在传输文本数据（如 SSH 会话中的命令输出）时减少数据量，从而提高传输速度。
<strong>CPU 性能</strong>：CPU 负载不高，不影响其他操作的前提下，可以考虑启用数据压缩。
<strong>数据类型</strong>：对于大量文本数据（如代码、日志）的传输，压缩效果明显；但对于已经压缩过的文件（如视频、图片），开启压缩效果不大，甚至可能降低效率。</p>
<p>3、终端仅仅是 Linux 主机的一个外部设备，不分担存储和计算工作</p>
<p>4、传统的终端与 Linux 主机之间传输的是字节流。</p>
<p>5、在 Linux 和其他类 Unix 操作系统中，物理终端和虚拟终端都被视为设备文件。设备文件是指向硬件设备的特殊文件，通过这些文件可以与硬件进行交互。</p>
<p>6、tr 命令是一个用于字符转换和删除的命令，可以处理字符流。</p>
<ul>
<li>字节值的范围：一个字节可以有 256 种可能的值（从 0 到 255），tr 不限制处理的字节值，所有 256 种字节值（包括 0）都可以被翻译或删除。</li>
</ul>]]></description>
</item>
<item>
    <title>人工智能</title>
    <link>https://jinxiwei1230.github.io/Jinxiwei.github.io/posts/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</link>
    <pubDate>Sat, 28 Sep 2024 15:53:01 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://jinxiwei1230.github.io/Jinxiwei.github.io/posts/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</guid>
    <description><![CDATA[<h2 id="第一章">第一章</h2>
<p>人工智能的三大流派</p>
<h2 id="第二章">第二章</h2>
<h3 id="21知识及其特性">2.1知识及其特性</h3>
<p>1、数据、信息和知识
数据(fact)
信息(how)
知识(why)
(wise)</p>
<p>2、噪声-数据-（组织分析）-信息-（解释评价）-知识-（理解归纳）-智慧</p>
<p>3、知识的层次</p>
<p>4、知识的分类</p>
<p>5、知识的表示方法（问题求解的基础）
非形式化的自然语言描述-形式化的易于计算的计算机语言</p>
<ul>
<li>状态空间表示</li>
</ul>
<h3 id="22状态空间表示">2.2状态空间表示</h3>
<p>1、概念</p>
<ul>
<li>三元组（S,F,G）</li>
</ul>
<h3 id="23与或树表示">2.3与或树表示</h3>]]></description>
</item>
</channel>
</rss>
